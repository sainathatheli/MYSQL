MYSQL:
======

Sql is classified into 

DDL
===
Data definition Language 

DDl is used to specify the structure or schema for Objects

cmds are : create,truncate,alter,rename,drop

DML
===
Data manipulation Language

DMl is used to perform insert or update or delete a record from database Object(table)

commands are :- insert,update,delete


DRl(Data retrevial language)
 or DQL(Data query language)
============================

Drl is used t retrieve the data from the table

command:
=======

select



DDL:
====

create command is used to specify the structure for Objects(database,table,view,procedure,function...etc)


Step1:
======
if you want to create any objects in mysql we need to use database.


1)createing a database:

syntax:
=======

create database <specify database name>

ex:
===

create a database named as cts.

sol:
====

create database cts;


to list all the database:
=========================

cmd is :

show databases;



to create any objects(database,table,view,procedure,function...etc)
 in database first we need to use the database:
====================================================================

cmd:
-----

use database;

ex:
----

use cts;


to check current your are in which database:
=============================================

cmd:
----

select database();



creating a table:
=================
syntax:
=======

creat table  [if not exists] tableName  (
                                         col1 datatype,
                                            col2 dataetype,
                                                 col3 datatype,,,,,,,,,coln datatype);

ex:
===
tablename: employee

columnsName    datatype   size

empno	      int         4
ename	      varchar     20
sal           decimal     10,2   -->738.30


sol:
====

create table employee(empno int(4),ename varchar(20),sal decimal(10,2));


to list all the tables from database:
=====================================
cmd:
----

show tables;


to describe the structure of the table:
=======================================

syntax:
-------

describe  tablename;

ex:
---

describe employee;


Once the table is created we need to insert data(record) into 
table for all columns using insert command
====================================================

syntax:
-------

insert into tablename values(value1,value2.....,valuen);

ex:
===

insert five records into table employee

sol:
----

insert into employee values(101,'smith',3000);

insert into employee values(103,'scott',4000);

insert into employee values(104,'martin',2000);

insert into employee values(102,'john',5000);

insert into employee values(105,'raju',3000);


to list the data or records from the table:
===========================================

syntax:
=======

select * from tablename;

ex:
===

select * from employee;



alter:
======

alter command is used to modifiy or alter the structure of the table.

a) using alter add a new column
-------------------------------
syntax:
-------

alter table tablename add columnName datatype;


ex:
---
Add column name is job to existing table employee.

sol:
====

alter table employee add job varchar(20);


ex2:
===

add mutiple columns address,mobilno columns to employee;

sol:
====

alter table employee add (mobileNo int(10),address varchar(20));


b)using alter modifying existing column:
----------------------------------------

syntax:
-------

alter table tablename modify colunname datatype;


ex:
===
modify the size of job column 20 to 10 size.

sol:
=====
alter table employee modify job varchar(10);


ex:
===
modify the size of address column 20 to 30 size.

sol:
----
alter table employee modify address varchar(30);


ex:
---
change mobileno datatype int to decimal

sol:
----
alter table employee modify mobileNo decimal(10);

note:
=====
if want to  decrease the size or change the datatype of column
firt we need to make column should contain null values.


c)using alter we can drop a column
===================================
syntax:
-------

alter table tablename drop columname;

ex:
===

drop a column address  using alter from employee table

sol:
----

alter table employee drop address;


d)using alter we can rename a columnanme:
==========================================

syntax:
--------

alter table tablename rename column oldcolname to new colname;

ex:
---
rename columname sal to salary in employee table

sol:
---

alter table employee rename column sal to salary;


e)using alter we can add a constraint:
======================================
syntax:
-------

alter table tablename add constraint constraintname column;



3)rename at DDL:
==============

rename a object 

syntax:
=======

rename table oldtablename to newtablename;

ex:
===
rename table name employee to employees;

sol:
---

rename table employee to employees;


4) truncate :
=============
truncate command is used to remove or delete all the records or rows or tuples from a table.

note:
====
once table is truncated we cannot restore those delete records.

syntax:
-------
truncate table tablename;


ex:
---
truncate a table employees;

sol:
----
truncate table employee;


5)drop
======

drop command is used to drop a objects(table,function,procedure...etc);

note:
-----
drop command will remove the strucutre and data from the database.

syntax:
========

drop table tablename;

ex:
---

drop a table named as employees;

sol:
----

drop table employees;


DML:
====
Dml is used to perform manipulation(insert,update,delete) on the table data.


insert:
=======
using insert command we can insert a row or record into table.


1)insert record for the all the columns:
=========================================

a) create table named as employees(empno,ename,job,sal,hiredate);  date format:-  'yyyy-mm-dd'

b) insert five records into employees table for all the columns.


sol:
====

create table employees(empno int(4),ename varchar(20),job varchar(15),sal decimal(10,2),hiredate date);


insert into employees values(7547,'smith','salesman',3000,'2018-10-02');

insert into employees values(7566,'martin','accounts',4000,'2017-01-08');

insert into employees values(7544,'john','hr',5000,'2018-01-10');

insert into employees values(7565,'rahul','research',5000,'2015-09-21');

insert into employees values(7556,'roja','clerk',4000,'2014-02-02');
 

2)insert the record into a table for specific columns:
------------------------------------------------------

syntax:
=======

insert into tablename (col1,col2,col3,col4) values (value1,value2,value3,value4);

ex:
===
insert 3 record into a table for specific columns(empno,ename,sal) of employees

sol:
====

insert into employees(empno,ename,sal) values (7856,'venkat',6000);


insert into employees(empno,ename,sal) values (7968,'srikar',5000);


insert into employees(empno,ename,sal) values (7868,'sumit',4000);



3)insert multiple records :
============================

syntax:
-------

insert into tablename  values 
    (value1,value2,value3,value4),
    (value1,value2,value3,value4),
  (value1,value2,value3,value4),
  (value1,value2,value3,value4),
   (value1,value2,value3,value4);


ex:
===
insert multiple records into employees table

sol:
----

insert into employees values 
  (7187,'madhu','Trainee',4000,'2020-12-10'),
  (7154,'suhas','manager',6000,'2009-09-09'),
  (7787,'balu','analyist',9000,'2018-10-02');




Update:
=======
update is used to update the existing record data from the table.

syntax:
=======

update tablename set colname1=value1,colname2=value2,colname=value3 
                                      [where condition]

note:
====
If where condition is not specified then all the records will be 
 updated in the table.


Ex:
===
update sal column(3000 to 5000) of employees record where empno 7547 

sol:
====

update employees set sal=5000 where empno=7547;

Ex
---
write a query to update job,ename columns of employees table where sal is 5000;

sol:-
=====

update employees set ename='AAA',job='consultant' where sal=5000;

Ex:
===
write a query to update sal with bonus 100 for all the employees;

sol:
----

update employees set sal=sal+1000;



delete:
=======
delete command is used to delete a specific records based on condition or
we can delete all the records with out condition.

syntax:
-------

delete from tablename [where condition];

note:
=====
if where condition is not specified all the records will be deleted.


ex:
===
write a query to delete a record from employees table where sal is 10000;

sol:
----

delete from employees where sal=10000;

ex:
===

write a query to delete a records from employees table where sal is 6000;

sol:
----
delete from employees where sal=6000;



DRL:
====
cmd: select

select command is used to display all columns or specific columns data from a table.

syntax:
-------
select * [specific columns] from tablename [where condition]


ex1:
====
write a query to all the records from the employees table?

sol:
----
select * from employees;


ex2:
====
write a query to display empno,enmae,sal from employees table ?

sol:
----
select empno,ename,sal from employees;


ex3:
----

write a query to display records where sal is 5000 to 7000 ?

sol:
----
select * from employees where sal>=5000 and sal<=7000;




Insert into select:
===================
inser into select statement copies the data from one table and
 inserts into antoher table

note:
-----
In insert into select statement that source data types and target
data types should be same.


sytntax:
--------
insert into tgt_tablename select *[specific columns ] from src_tablename 
[where condition]

 
ex1:
===
copy the empno,ename columns data from employees table and insert
into student(sid,sname);

sol:
====
create table student(sid int(4),sname varchar(20));

insert into student select empno,ename from employees ;

or

insert into student(sid,sname) select empno,ename from employees;



to display the current sysdate
==============================
select current_date();


using current_date() in insert command:
=======================================

insert into employees values (7777,'rakesh','clerk',4000,current_date())


copy table columns schema but not data:
======================================

create table tablename as select * [specific columns ] from table where 1=2;

ex1:
===

create a table named as emp11 as copy structure of empno,ename,sal with out data.

sol:
====

create table emp11 as select empno,ename,sal from employees where 1=2;


copy table columns schema with data:
======================================

create table tablename as select * [specific columns ] from table;

ex1:
===

create a table named as emp12 as copy structure and data of empno,ename,sal 
with data.

sol:
====

create table emp12 as select empno,ename,sal from employees;





CONSTRAINTS:
============
MySQL CONSTRAINT is used to define rules to allow or restrict what values can be stored in columns. 
The purpose of inducing constraints is to enforce the integrity of a database.

MySQL CONSTRAINTS are used to limit the type of data that can be inserted into a table.

MySQL CONSTRAINTS can be classified into two types - column level and table level.

The column level constraints can apply only to one column where as table level constraints are applied 
to the entire table.


MySQL CONSTRAINTs are :
-----------------------

NOT NULL
UNIQUE
PRIMARY KEY
FOREIGN KEY
CHECK
DEFAULT


NOT NULL:
---------
In MySQL NOT NULL constraint allows to specify that a column can not contain any NULL value.

syntax:
-------
create table tablename ( 
                        colum1 datatype not null,
                        column2 datatype not null,
                        column3 datatype not null)


Ex:
---
create table named as ex1(empno,ename,sal) with not null constraints.

sol:
====

create table ex1(
                 empno int(4) not null,
                  ename varchar(20) not null,
                   sal decimal(10,2) not null);


mysql> insert into ex1 values(1,null,3000);
ERROR 1048 (23000): Column 'ename' cannot be null



DEFAULT:
--------
It ensures that the column sets a default value for empty records.

In a MySQL table, each column must contain a value ( including a NULL). While inserting data into a table, 
if no value is supplied to a column, then the column gets the value set as DEFAULT.

syntax:
=======

create table tablename(
                        col1 datatype [null | not null] default value,
			col2 datatype [null | not null] default value,
			col3 datatype [null | not null] default value);

Ex:
---
create table named as ex2(sid,sname,marks) with not noll and  default constraint for marks.

sol:
----
create table ex2(
		  sid int(4) not null,
                  sname varchar(10) not null,
		  marks int(4) not null default 0);


mysql> insert into ex2 values(1,'ss',30);
Query OK, 1 row affected (0.01 sec)

mysql> insert into ex2 values(1,'ss',null);
ERROR 1048 (23000): Column 'marks' cannot be null
mysql> insert into ex2 (sid,sname) values (2,'BB');
Query OK, 1 row affected (0.01 sec)

mysql> select * from ex2;
+-----+-------+-------+
| sid | sname | marks |
+-----+-------+-------+
|   1 | ss    |    30 |
|   2 | BB    |     0 |
+-----+-------+-------+
2 rows in set (0.00 sec)			




CHECK:
------
A CHECK constraint controls the values in the associated column. 
The CHECK constraint determines whether the value is valid or not from a logical expression (condition).

syntax:
-------
check (condition)


create table tablename(
                        col1 datatype [null | not null] default value,
			col2 datatype [null | not null] check(condition) ,
			col3 datatype [null | not null] default value);


ex:
---
create a table named as ex3(sid,sname,age,address) with not null constraint and apply
check constraint for age column(age should be greater than 18)

sol:
----
colum-level
-----------
create table ex3(
		  sid int(4) not null,
		  sname varchar(10) not null,
		  age  int(3) not null check(age>18),
		  address varchar(10) not null);
 

mysql> insert into ex3 values(1,'smith',19,'CHE');
Query OK, 1 row affected (0.01 sec)

mysql> insert into ex3 values(2,'smith',17,'CHE');
ERROR 3819 (HY000): Check constraint 'ex3_chk_1' is violated.
mysql>


table-level:
============
syntax;
------
create table tablename(
                        col1 datatype [null | not null],
			col2 datatype [null | not null] ,
			col3 datatype [null | not null] default value,
                        check(condition) );

ex:
---
create a table named as ex4(empno,ename,sal,job,address) with check constraint for sal(sal>1500) at table level

sol:
----
create table ex4(
		empno int(4) not null,
		ename varchar(10) not null,
		sal int(5) not null,
		job varchar(10) not null,
		address varchar(10),
		check(sal>1500));

mysql> insert into ex4 values(101,'john',1600,'clerk','boston');
Query OK, 1 row affected (0.01 sec)

mysql> insert into ex4 values(102,'martin',1400,'accounts','ny');
ERROR 3819 (HY000): Check constraint 'ex4_chk_1' is violated.






UNIQUE:
-------
The UNIQUE constraint in MySQL does not allow to insert a duplicate value in a column.
 
The UNIQUE constraint maintains the uniqueness of a column in a table. 
More than one UNIQUE column can be used in a table.

colum-level
-----------
create table tablename(
                        col1 datatype [null | not null] default value,
			col2 datatype [null | not null] unique,
			col3 datatype [null | not null] default value);



ex:
---
create table named as ex5(empno,ename,sal) with not null constraint for ename,sal and unique constraint
for empno

sol:
----
create table ex5(
                  empno int(5) unique,
		  ename varchar(10) not null,
		  sal int(5) not null);


mysql> insert into ex5 values(1,'rohan',4000);
Query OK, 1 row affected (0.01 sec)

mysql> insert into ex5 values(1,'ew',5000);
ERROR 1062 (23000): Duplicate entry '1' for key 'empno'
mysql> insert into ex5 values(null,'ew',5000);


Table-level
-----------
create table tablename(
                        col1 datatype [null | not null],
			col2 datatype [null | not null],
			col3 datatype [null | not null],
			unique(columname),
                        );

ex:
---
create table ex6( empno int(4),
		  ename varchar(10) not null,
	          sal int(5) not null,
		  job varchar(10) not null,
		  unique(empno));


mysql> insert into ex6 values(1,'ew',5000,'hr');
Query OK, 1 row affected (0.01 sec)

mysql> insert into ex6 values(1,'ew',5000,'hr');
ERROR 1062 (23000): Duplicate entry '1' for key 'empno'





PRIMARY KEY:
------------
It uniquely identifies a row in the table. It is a combination of NOT NULL and UNIQUE constraints

A PRIMARY KEY constraint for a table enforces the table to accept unique data for a specific column.

Note:
-----
A Table Should contain only one primary key.


syntax:
-------

colum-level

create table tablename(
                        col1 datatype primary key,
			col2 datatype not null
			col3 datatype not null);

ex:
---
create a table named as ex7(empno,ename,sal)with primary key (empno)

sol:
----
create table ex7( empno int(4) primary key,
		  ename varchar(10) not null,
		  sal int(5));

mysql> insert into ex7 values(1,'ashok',300);
ERROR 1062 (23000): Duplicate entry '1' for key 'Primay'
mysql> insert into ex7 values(null,'ashok',300);
ERROR 1048 (23000): Column 'empno' cannot be null


Table-level:
-------------

create table tablename(
                        col1 datatype ,
			col2 datatype not null,
			col3 datatype not null,
			primary key(columnname),
			);

ex:
---
create table ex8( empno int(4),
		  ename varchar(10),
		  sal int(5),
		  primary key(empno));


mysql> insert into ex8 values(1,'ashok',300);
Query OK, 1 row affected (0.01 sec)

mysql> insert into ex8 values(1,'ashok',300);
ERROR 1062 (23000): Duplicate entry '1' for key 'PRIMARY'
mysql> insert into ex8 values(null,'ashok',300);
ERROR 1048 (23000): Column 'empno' cannot be null
mysql>



FOREIGN KEY:
------------
A FOREIGN KEY in MySQL creates a link between two tables by one specific column of both tables. 

The specified column in one table must be a PRIMARY KEY and 
referred by the column of another table known as FOREIGN KEY.

we can add foreign key for specified column using References keyword.

syntax:
-------
column-level
------------

create table tablename(col1 datatype,
			col2 datatype,
			col 3 datatype,
			specified_column datatype references parent_table(primary key column name));
                        specified_column datatype references parent_table(primary key column name));

ex:
---
create parenttable named as dept_1(deptno,dname,loc) and here deptno is primary key
create child table named as emp_1(empno,ename,sal deptno) here-deptno is specified column
and empno is pk ,link between two tables dept_1,emp_1 using specified column(deptno);

sol:
---
create table dept_1(
			deptno int(3) primary key,
			dname varchar(10),
			loc varchar(10)
                    );

create table emp_1(
		    empno int(4) primary key,
		    ename varchar(10),
		    sal int(5),
		    deptno int(3) references dept_1(deptno));  

 
first insert into parent table followed by child table.

select COLUMN_NAME, CONSTRAINT_NAME, REFERENCED_COLUMN_NAME, REFERENCED_TABLE_NAME
from information_schema.KEY_COLUMN_USAGE
where TABLE_NAME = 'EMP_1';


Ex:
---
table-level
-----------
syntax:
-------
create table tablename(col1 datatype,
			col2 datatype,
			col 3 datatype,
 			specifiedcolumn datatype,
		       foreign key(specified_column) REFERENCES parent_table(Specified_column-pk);



create a table name is course(cid,cname,fee)  -->cid act as pk

create a table name is student_1(sid,sname,address,cid)--> sid is pk and cid fk
link two tables using a specified column(cid).


sol:
----
create table course(
                     cid int(4),
		     cname varchar(10),
                     fees int(4),
		     primary key(cid));


child table:
-------------
create table student_1(
			sid int(4),
	   		sname varchar(10),
			address varchar(10),
			cid int(4),
			primary key(sid),
			foreign key(cid) REFERENCES course(cid));


to display all constraints from STUDENT_1 table
================================================
select COLUMN_NAME, CONSTRAINT_NAME, REFERENCED_COLUMN_NAME, REFERENCED_TABLE_NAME
from information_schema.KEY_COLUMN_USAGE
where TABLE_NAME = 'STUDENT_1';


first insert the records into parent table followed by child table.


 ON DELETE CASCADE:
 ==================
 IF TRY TO DELETE A RECORD FROM PARENT TABLE IF
 THEIR EXISTS DEPENDENT RECORD (CHILD RECORD),WE WILL GET
 ERROR

 
 TO RESOLVE THIS ERROR
 ----------------------

 WE NEED TO CREATE A CHILD TABLE WITH FOREIGN KEY FOLLOWED BY
 ON DELETE CASCADE CONSTRAINT.


 Ex:
 ---
  create table named as product_1(pid,pname,price) --> pid is pk
  create table named as customer_1(cid,cname,address,pid)--> cid is pk and pid is fk
  link two tables using specified column(pid) with on delete cascade;

sol:
====

create table product_1(pid int(4) primary key,
		       pname varchar(10),
	               price decimal(10,2));


child table with on delete cascade:
-----------------------------------

create table customer_1(  
			  cid int(4) primary key,
			  cname varchar(10),
			  caddress varchar(10),
			  pid int(4),
                          foreign key(pid) REFERENCES product_1(pid) on delete cascade);


first insert the records into parent table followed by child table.

delete a record from parent check it record is delete or not ? yes deleted



To display all constraints on a table, you can try any of the following methods 
----------------------------------------------------------------------------------

Method 1 − Using SHOW command
------------------------------
You can check with the help of show command. 

The syntax is as follows 
------------------------

SHOW CREATE TABLE yourTableName;


Method 2 − Using information.schema
------------------------------------
you can use information.schema. 

The syntax is as follows
------------------------

select COLUMN_NAME, CONSTRAINT_NAME, REFERENCED_COLUMN_NAME, REFERENCED_TABLE_NAME
from information_schema.KEY_COLUMN_USAGE
where TABLE_NAME = 'yourTableName';


ex:
====

select COLUMN_NAME, CONSTRAINT_NAME, REFERENCED_COLUMN_NAME, REFERENCED_TABLE_NAME
from information_schema.KEY_COLUMN_USAGE
where TABLE_NAME = 'EMP_1';


Alter Level:
============
ex:
---

create table emp_dup(empno int(4),ename varchar(10),sal int(5));

adding primary key for empno at alter level:
-----------------------------------------

alter table emp_dup add primary key(empno);

adding check constraint for sal alter level:
--------------------------------------------
alter table emp_dup add check(sal>1500);


adding unique constraint at alter level:
=========================================
syntax:
-------
alter table tablename add unique(columname);

adding foreign key constraint at alter level:
==============================================
syntax:
-------
alter table tablename add foreign key(specifiedcolumn) REFERENCES parent_table(specified-column-pk);

note:
-----
Adding not null and default constraint at alter level and table level are not possibe.



select COLUMN_NAME, CONSTRAINT_NAME, REFERENCED_COLUMN_NAME, REFERENCED_TABLE_NAME
from information_schema.KEY_COLUMN_USAGE
where TABLE_NAME = 'EMP_DUP';


to drop a constraint a column:
==============================

alter table tablename drop constraint_name;

alter table emp_dup drop PRIMARY key;



Mysql Aliases:
==============

Mysql aliases can be used to create a  temporary name for columns or tables.

syntax for columns:
-------------------

column_name [As] alias_name

syntax for tables:
==================

table_name [as] alias_name


ex:
----
mysql> select current_date() as 'todayDate' ;

mysql> select current_date() 'todayDate' ;

mysql> select current_date() todayDate ;
+------------+
| todayDate  |
+------------+
| 2021-03-03 |
+------------+


ex:
---
mysql> select e.ename,e.sal from employees as e;

mysql> select e.ename,e.sal from employees e;



Scriptfile:
===========
create a file , specify group of mysql commands and save the file with filename.sql

to run script file:
===================
source  <absoultepathof the scriptfile.sql>


Ex:
===
create a file named as mysqlscript.sql
and add the following below commands

1) create a table named as perosns(person_id,person_name,address);

2) describe table persons

3) insert multiple records into persons

4) display the records from the persons table.


to run :
--------
source mysqlscript.sql



 JOINS:
  ======
   Join are used to retrieve the records from multiple tables .

   join are used to create temporary a relation between the tables
   based on common column.

   if suppose we have n tables ,then the atleast the possible
   join conditions are n-1.

   join are performed based on a common column datatype.


  Mysql supports following the types of joins
  -------------------------------------------

  Inner join

  Left join
  Right join
  Full outer join

  Self-join
  Cross join


  InnerJoin:
  ----------
  Inner joins fetch or return the matched records from the both tables.

  syntax:
  --------
  select specific_columns from table1 alias name inner join table2 aliasename 
                                 on(table1.common_column_name=table2.common_column_name);



  Ex:
  ---
  write a inner join or equi-join to fetch matched records from dept,emp tables.
  dept(deptno,dname,loc)
  emp(empno,ename,sal,job,deptno)

  sol:
  ---
  select d.deptno,d.dname,d.loc,e.empno,e.ename,e.sal,e.job,e.deptno 
   					from dept d  inner join emp e on(d.deptno=e.deptno);

  

  left Join:
  ---------
  left outer join fetches the matched records from both tables and
  non-matched records from the left table.

  syntax:
  ------
  select specific_columns from table1 alias name left [outer] join table2 aliasename 
                                 on(table1.common_column_name=table2.common_column_name);
  
  note:
  ----
  Here table1 act as left table.

  Ex:
  ---
  write a join  to fetch matched records from dept,emp tables and non-matched records from dept.
  dept(deptno,dname,loc)
  emp(empno,ename,sal,deptno)

  sol:
  ---
  select d.deptno,d.dname,d.loc,e.empno,e.ename,e.sal,e.deptno 
   					from dept d left join emp e on(d.deptno=e.deptno);


  Right Join:
  ---------
  Right outer join fetches the matched records from both tables and
  non-matched records from the Right table.

  syntax:
  ------
  select specific_columns from table1 alias name Right [outer] join table2 aliasename 
                                 on(table1.common_column_name=table2.common_column_name);
  
  note:
  ----
  Here table2 act as right table.

  Ex:
  ---
  write a join  to fetch matched records from dept,emp tables and non-matched records from emp.
  dept(deptno,dname,loc)
  emp(empno,ename,sal,deptno)

  sol:
  ---
  select d.deptno,d.dname,d.loc,e.empno,e.ename,e.sal,e.deptno 
   					from dept d Right join emp e on(d.deptno=e.deptno);


  Full outer Join:
  ---------------
  Full outer join fetches the matched records and
  non-matched records from the both tables.

  syntax:
  ------
  select specific_columns from table1 alias name Full [outer] join table2 aliasename 
                                 on(table1.common_column_name=table2.common_column_name);

   Ex:
  ---
  write a join  to fetch matched records and non-matched records from dept,emp tables.
  emp(empno,ename,sal,deptno)

  sol:
  ---
  select d.deptno,d.dname,d.loc,e.empno,e.ename,e.sal,e.deptno 
   					from dept d full join emp e on(d.deptno=e.deptno);


  --we can perform full out join by union using left join and right join
  ------------------------------------------------------------------------

  select d.deptno,d.dname,d.loc,e.empno,e.ename,e.sal,e.deptno 
   					from dept d left join emp e on(d.deptno=e.deptno)
  union
  select d.deptno,d.dname,d.loc,e.empno,e.ename,e.sal,e.deptno 
   					from dept d Right join emp e on(d.deptno=e.deptno);


  self Join:
  ---------
  A self join is a join that is used to join a table with itself.

  note:
  ----
   we need to create  two aliasname on the same table.

  ex:
  ---
  write a query to display employeenames and its managers from emp table using self join?
 
  sol:
  ----

  select e.ename,m.ename as manager from emp e ,emp m where m.empno=e.mgr;
 

  cross Join:
  -----------
  It will perform cartesian product.

  ex:
  ==
  write query to perform cross join between dept and emp ?
  dept--5records
  emp -- 15 records 
  cross join -- 5*15 = 75 records

 sol:
 ----
  select d.deptno,d.dname,d.loc,e.empno,e.ename,e.sal from dept d cross join emp e;

  or

  select d.deptno,d.dname,d.loc,e.empno,e.ename,e.sal from dept d,emp e;




Operators in MySQL
-------------------
Operators are used to specifying a condition in a statement in MySQL. 
Below are the different types of operators used in MySQL.

1. Arithmetic Operators
------------------------
In MySQL, arithmetic operators are used to perform the arithmetic operations as described below.


Arithmetic Operators in MySQL
-----------------------------

Operator	Description									Example
+		Addition of two operands							a + b
–		Subtraction of right operand from the left operand				a – b
*		Multiplication of two operands							a * b
/		Division of left operand by the right operand					a / b
%		Modulus – the remainder of the division of left operand by the right		a % b


Comparison Operators or relation operators
------------------------------------------

The comparison operators in MySql are used to compare values between operands and 
return true or false according to the condition specified in the statement.


Comparison Operators in MySQL
-----------------------------

Operator	Description	
--------	------------
>	If the value of left operand is greater than that of the value of the right operand, 
        the condition becomes true; if not then false.	

<	If the value of left operand is less than that of a value of the right operand, 
         the condition becomes true; if not then false.	

=	If both the operands have equal value, the condition becomes true; if not then false.

!=	If both the operands do not have equal value, the condition becomes true; if not then false.

>=	If the value of left operand is greater than or equal to the right operand, the condition becomes true; 
         if not then false.
	
<=	If the value of left operand is less than or equal to the right operand, the condition becomes true;
        if not then false.	

<>	If the values of two operands are not equal, the condition becomes true; if not then false.	

BETWEEN   RETURNS THE VALUE ,THE VALUE SPECIFIED IN THE RANGE.
            (INCLUSIVE)

IN      RETURNS THE VALUE ,THE VALUE AVAILABLE IN THE
                          GIVEN LIST OF VALUES.


Ex:
---
SELECT * FROM EMP WHERE SAL > 4000;

SELECT * FROM EMP WHERE SAL = 3000;

SELECT * FROM EMP WHERE SAL < 3000;

SELECT * FROM EMP WHERE SAL !=3000;

SELECT * FROM EMP WHERE SAL <>3000;




Logical operators
-----------------
logical operators we perform boolean operations. 

MySQL understands these logical operators: 
AND, OR and NOT and XOR. 

Logical operators return TRUE or FALSE. In MySQL, 1 is true, 0 is false.

Ex:
---
1)The AND operator evaluates to true if both operands are true.

mysql> SELECT FALSE AND FALSE, FALSE AND TRUE,TRUE AND FALSE, TRUE AND TRUE;


2)The OR operator evaluates to true if at least one of the operands is true.

mysql> SELECT FALSE OR FALSE, FALSE OR TRUE, TRUE OR FALSE, TRUE OR TRUE;


3)The XOR operator evaluates to true if exactly one of the operands is true.

mysql> SELECT FALSE XOR FALSE, FALSE XOR TRUE,TRUE XOR FALSE, TRUE XOR TRUE;


4)The NOT operator is negation operator. It makes true false and false true.

mysql> SELECT NOT TRUE, NOT FALSE;

mysql> SELECT NOT (3=3);



Ex:
---
1)WRITE A QUERY TO DISPLAY RECORD WITH SPECIFIED RANGE
  SAL 2000 AND 3000?

2)WRITE A QUERY TO DISPLAY THE RECORDS BASED ON IN WHERE
 SAL 1000,2000,3000 ON EMP TABLE.


 LIKE OPERATOR:
 ==============

  IT WILL RETRUN THE VALUE BASED ON SEARCH OF PATTERN

 THERE ARE TWO PATTERNS

 %  --PERCENATAGE-- REPRESENT ONE OR MORE CHARACTERS
 _  ---UNDERSCORE -- REPRESENT SINGLE CHARACTER


  SYNTAX:
  =======

  LIKE 'PATTERN'

 EX:
 ===

  WRITE A QUERY TO DISPALY ALL ENAMES FROM EMP
  WHERE ENAME START WITH S.


 SOL:
 ====

  SELECT ENAME FROM EMP WHERE ENAME LIKE 'S%';


  ex:
  ===
  write a query to display all enames start with

  sol:
  =====

  select ename from emp where ename like 'A_L%';



 ORDER BY CLAUSE:
 ================
 THIS CLAUSE IS USED TO SORT THE OUTPUT STATEMENT BASED ON SELECT
 QUERY.

 BY DEFAULT IT SORT ASCENDING OR ASC

 DESCENDING  
 -----------
 DESC

 SYNTAX:
 ========
 SELECT * FROM TABLENAME [WHERE] [ORDER BY COLUMNANME...];



 AGGREGATE FUNCTION or single row functions
 ===========================================
 An aggregate function performs a calculation on multiple values 
 and returns a single value. 
 ex:
 ---
  SUM 
  AVG
  MIN
  MAX
  COUNT
  DISTINCT -- TO REMOVE DUPLICATE VALUES



 GROUP BY Clause
 ---------------
 GROUP BY Clause is used to collect data from multiple records and group the result
 by one or more column.
 It is generally used in a SELECT statement.

 You can also use some aggregate functions like COUNT, SUM, MIN, MAX, AVG etc. on the grouped column. 

 SYNTAX:
 =======

  SELECT exp1,expr2,aggregate_function(expr) FROM TABLNAME [WHERE][GROUP BY exp1,expr2][ORDER BY COLUMNS];

 note:
 ----
 The expressions that are not encapsulated within an aggregate function and must be included in the GROUP BY clause.

 EX
 ===
 1)WRITE A QUERY TO PERFORM SUM OF SALARIES BASED ON for EACH
 DEPARTMENT NO FROM EMP TABLE.

 sol:
 ----
  select Deptno,sum(sal) from emp group by deptno;

  or 
  
  select Deptno,sum(sal) from emp group by deptno order by deptno;
 


 2) WRITE A QUERY TO PERFROM SUM OF SALARIES BASED ON for EACH
    DEPARMTENT NO AND COUNT NO EMPLOYESS IN EACH DEPT FROM EMP.
  
  sol:
  ----
   select deptno,count(ename),sum(sal) from emp group by deptno order by deptno;
   
 3)WRITE A QUERY TO PEFROM SUM OF SALARIES BASED ON
   for EACH DEPTNO AND for EACH JOB .

 sol:
 ----
  select  deptno,job,sum(sal),count(ename) from emp group by deptno,job order by deptno;
 
  

 HAVING Clause
 -------------
 
 HAVING Clause is used with GROUP BY clause. It always returns the rows where condition is TRUE.

 The  HAVING clause is used in the SELECT statement to specify filter conditions for a group of rows or aggregates.

 The HAVING clause is often used with the GROUP BY clause to filter groups based on a specified condition. 
 If the GROUP BY clause is omitted, the HAVING clause behaves like the WHERE clause.

 syntax:
 -------
 SELECT exp1,expr2,aggregate_function(expr) FROM TABLNAME [WHERE][GROUP BY exp1,expr2] 
								[Having condition][ORDER BY COLUMNS];

 Ex;
   ===
   Write a query to display sum(sal) of for each dept sum(sal)greater 8750?

   sol:
   ---

    select deptno,sum(sal) as ssal from emp group by deptno having sum(sal)>8750;

	or

    select deptno,sum(sal) as ssal from emp group by deptno having ssal>8750  ;



String Functions:
------------------ 

MySQL string functions that allow you to manipulate character string data effectively.

1. ASCII(str)
--------------
Returns the ASCII value of the leftmost character of the string str.

Ex:
--
mysql> select ascii('a');
+------------+
| ascii('a') |
+------------+
|         97 |
+------------+
1 row in set (0.00 sec)

mysql> select ascii('A');
+------------+
| ascii('A') |
+------------+
|         65 |
+------------+
1 row in set (0.00 sec)

Ex:
---
mysql> select ascii(ename) from emp;
+--------------+
| ascii(ename) |
+--------------+
|           83 |
|           65 |
|           87 |
|           74 |
|           77 |
|           66 |
|           67 |
|           83 |
|           75 |
|           84 |
|           65 |
|           74 |
|           70 |
|           77 |
+--------------+

2.CHAR_LENGTH(str)
------------------
Returns the length of the string str in characters.

ex:
----
mysql> select char_length('welcome');
+------------------------+
| char_length('welcome') |
+------------------------+
|                      7 |
+------------------------+
1 row in set (0.00 sec)


3.CONCAT(str1, str2, …., strn)
------------------------------
Returns a string formed by joining str1 to strn. If any sub-string is NULL, the result is NULL.

ex:
---
mysql> select concat('hello','hi','welcome') as concat;

mysql> select concat('hello',ename) from emp;


4.CONCAT_WS(separator, str1, …, strn)
--------------------------------------
Returns a concatenated string separated by a separator.

Ex:
---
mysql> select concat_ws('#','hello','hi','welcome') as concat_ws;
+------------------+
| concat_ws        |
+------------------+
| hello#hi#welcome |
+------------------+

Ex:
---
mysql> select concat_ws('$','hello',ename) as concatws from emp;


5.INSERT(str, pos, len, newstr)
--------------------------------
Replaces the sub-string starting at position pos and of length len in the string str with newstr.

Ex:
---
mysql> select insert('welcome','3','3','aaa');
+---------------------------------+
| insert('welcome','3','3','aaa') |
+---------------------------------+
| weaaame                         |
+---------------------------------+

Ex:
---
mysql> select ename,insert(ename,3,3,'hii') from emp;


6.INSTR(str, substr) / LOCATE(substr, str) / POSITION(substr IN str)
---------------------------------------------------------------------
Returns the position of the first occurrence of substr in str.

Ex:
---
mysql> select instr('foobar','oo');


7.LCASE() / LOWER() and UCASE() / UPPER()
-----------------------------------------
Converts a string to lower case and upper case.

Ex:
===
mysql> select lcase('HELLO');

mysql> select lower('HELLO')

mysql> select  ucase('sdsdsd');

mysql> select  upper('sdsdsd');


8.LEFT(str, len) / RIGHT(str, len)
----------------------------------
Returns the leftmost and rightmost len characters from the string str.

Ex:
--
mysql> select left('hello',3);
+-----------------+
| left('hello',3) |
+-----------------+
| hel             |
+-----------------+
1 row in set (0.00 sec)

mysql> select right('hello',3);
+------------------+
| right('hello',3) |
+------------------+
| llo              |
+------------------+
1 row in set (0.00 sec)

9.LENGTH(str) / OCTET_LENGTH(str)
---------------------------------
Returns the length of the string str in bytes. 

This is very much like CHAR_LENGTH function. 
The difference comes when there are multibyte characters in the string.

Ex:
===
mysql> select length('welcome');

mysql> select ename,length(ename) from emp;


10.LPAD(str, len, padstr) / RPAD(str, len, padstr)
---------------------------------------------------
Inserts sub-string from position 0 of the string padstr at the beginning and 
end of the string str until the resultant string is of len characters.

Ex:
---
mysql> select lpad('hello','17','come');
+---------------------------+
| lpad('hello','17','come') |
+---------------------------+
| comecomecomehello         |
+---------------------------+
1 row in set (0.00 sec)

mysql> select lpad('hello','19','come');
+---------------------------+
| lpad('hello','19','come') |
+---------------------------+
| comecomecomecohello       |
+---------------------------+
1 row in set (0.00 sec)

mysql> select lpad('hello','7','come');
+--------------------------+
| lpad('hello','7','come') |
+--------------------------+
| cohello                  |
+--------------------------+
1 row in set (0.00 sec)



11.LTRIM(str) / RTRIM(str) / TRIM(str)
--------------------------------------
Returns the string str after trimming white spaces from left, right or both ends.

Ex;
---
mysql> select ltrim('  hello');

mysql> select rtrim('hello   ');

mysql> select trim('   hello   ');


12.QUOTE(str)
-------------
This query quotes and un-quotes the string str. 
Special characters are escaped.

mysql> select quote('welcome$hello');
+------------------------+
| quote('welcome$hello') |
+------------------------+
| 'welcome$hello'        |
+------------------------+
1 row in set (0.00 sec)

mysql> select quote('welcome\n hello');
+--------------------------+
| quote('welcome\n hello') |
+--------------------------+
| 'welcome
 hello'         |
+--------------------------+


13.REPLACE(str, from_str, to_str)
-----------------------------------
Replaces all occurrences of sub-string from_str with sub-string to_str in the string str. 
It is case-sensitive.

Ex:
---
mysql> select replace('welcome','el','hi');
+------------------------------+
| replace('welcome','el','hi') |
+------------------------------+
| whicome                      |
+------------------------------+
1 row in set (0.00 sec)


Ex:
---
mysql> select ename,replace(ename,'S','A') from emp;



14.REVERSE(str)
---------------
Reverses the string str.

Ex:
---
mysql> select reverse('hello') ;

mysql> select ename,reverse(ename) from emp;


15.SUBSTR(str, pos)/SUBSTRING(str, pos)/SUBSTR(str, pos, len)/SUBSTRING(str, pos, len)
--------------------------------------------------------------------------------------
Returns a substring from the string str starting from position pos, 
till the end if no len is specified or for len characters otherwise. 

Remember, Index starts from 1 in MySQL

Ex:
==
mysql> select substr('hello',2),substring('hello',2);
+-------------------+----------------------+
| substr('hello',2) | substring('hello',2) |
+-------------------+----------------------+
| ello              | ello                 |
+-------------------+----------------------+
1 row in set (0.01 sec)

mysql> select substr('hello',2,2),substring('hello',2,2);
+---------------------+------------------------+
| substr('hello',2,2) | substring('hello',2,2) |
+---------------------+------------------------+
| el                  | el                     |
+---------------------+------------------------+
1 row in set (0.00 sec)

Ex:
---
mysql> select substr('welcome',-4,3);
+------------------------+
| substr('welcome',-4,3) |
+------------------------+
| com                    |
+------------------------+
1 row in set (0.00 sec)


NUMBER FUNCTIONS:
=================

ABS -- IT WILL DISPLAY ABSLOUTE VALUE INTEGER.

SYNTAX:
=======
ABS(NUM)

EX:
===

SELECT ABS(5),ABS(-5),ABS(NULL);

OLP:--  5,5,

SQRT:
=====
IT WILL RETRUN SQRT ROOT VALUE OF A NUMBER.

SYNTAX:
========

SQRT(NUM);

EX:
===

SELECT SQRT(4),SQRT(9),SQRT(5),SQRT(NULL);

OLP:-- 2,3,2.36,

MOD:
====

THIS FUNCTION RETRUN REMAINDER.

SYNTAX
======

MOD(VALUE,DIVISON);

EX:
===
SELECT MOD(4,2),MOD(5,2);

O/P:- 0,1

ifnull():
=========

THIS FUNCTION IS USED TO REPLACE THE NULL VALUES.

SYNTAX:
-------
ifNULL(colname,REPLACE VALUE)

EX:
===
WRITE A QUERY TO DISPLAY COMM COLUMN FROM EMP
AN REPLACE NULL VALUES WITH 0;

SOL:
====

SELECT ifnull(COMM,0) FROM EMP;


CEIL:
======

THIS FUNCTION ROUND THE VALUE TO not less than current value.

SYNTAX:
========

CEIL(NUM);

EX:
===

SELECT CEIL(4.5),CEIL(5),CEIL(4.2) ;

OLP:- 5,5,5

FLOOR:
======
THIS FUNCTION ROUND THE VALUE TO Lowest POSSIBLE VALUE

SYNTAX:
-------
FLOOR(NUM);

EX:
===

SELECT FLOOR(4.5),FLOOR(4.2),FLOOR(4.7);

O/P:- 4,4,4,

pow(numer,exponential):
======================
it will return power of an number.

select pow(3,2),pow(2,3);

o/p:-   9,8





Variable:
=========
A variable allows a programmer to store data temporarily during the execution of code.

syntax:
-------
set @variablename=initialize the value;

display the data from variable:
-------------------------------

select @variablename;

Ex:
===

mysql> set @name='Sumit deshpade';
Query OK, 0 rows affected (0.00 sec)

mysql> select @name;
+----------------+
| @name          |
+----------------+
| Sumit deshpade |
+----------------+
1 row in set (0.01 sec)

mysql> set @dno=20;
Query OK, 0 rows affected (0.00 sec)

mysql> select * from emp where deptno=@dno;


Case- WHEN-END
===============
to check multiple conditions

syntax:
-------
case columnname
when condition then result
when conditon then result

[else]

end;

Ex:
----
mysql> select empno,ename,case sal
    -> when 5000 then 'highest salary'
    -> when 3000 then 'low salary'
    -> else 'daily wages'
    -> end as salary from emp;


mysql> select empno,ename,sal,case
    -> when sal>5000 then 'highest salary'
    -> when sal>2000 and sal <=3000 then 'low salary'
    -> else 'daily wages'
    -> end as status from emp;


if condition:
-------------
syntax:
-------

if (expr1,exp2,exp3)  --> if expr1 is true then it will return exp2,if not then it exp3;

ex:
---
select if(10>5,'greater','lesser than 5')

mysql> select sal,if(sal>=5000,'high salary','low salary') from emp;


Procedure
=========
A procedure (often called a stored procedure) is a collection of pre-compiled SQL statements stored inside the database. 
It is a subroutine or a subprogram in the regular computing language. 

A procedure always contains a name, parameter lists, and SQL statements. 

We can invoke the procedures by using triggers, other procedures and applications such as Java, Python, PHP, etc.


Stored Procedure Features
-------------------------
Stored Procedure increases the performance of the applications. Once stored procedures are created, 
they are compiled and stored in the database.

Stored procedure reduces the traffic between application and database server. Because the application has to 
send only the stored procedure's name and parameters instead of sending multiple SQL statements.

Stored procedures are reusable and transparent to any applications.

A procedure is always secure.The database administrator can grant permissions to 
applications that access stored procedures in the database without giving any permissions on the database tables.

syntax:
-------

DELIMITER &&  or DELIMITER //
CREATE PROCEDURE procedure_name [[IN | OUT | INOUT] parameter_name datatype [, parameter datatype]) ]    
BEGIN    
    Declaration_section    /*to declare local variables using delcare keyword*/
    Executable_section    
END &&   or  //
DELIMITER ;  


The procedure syntax has the following parameters:

Parameter Name						Descriptions
--------------				-----------------------------------------------
procedure_name				It represents the name of the stored procedure.

parameter				It represents the number of parameters. It can be one or more than one.

Declaration_section			It represents the declarations of all variables.

Executable_section			It represents the code for the function execution or sql queries.

 
MySQL procedure parameters
==========================

IN: These types of parameters are assigned the values while calling the stored procedure and 
    the value cannot be modified or overwritten inside the stored procedure but only referenced and 
    used by the stored procedure.

OUT: These are the parameters that can be assigned the values and overridden in the stored procedure 
     but cannot be referenced by it.

IN OUT: These types of parameters are assigned the values while calling the stored procedure and 
        the value can be modified or overwritten inside the stored procedure as well as
        referenced and used by the stored procedure.


to call the procedure:
======================
syntax:
-------
  call procedurename(if any parameter);


Ex:1
-----
Create a procedure to store select query to display the data from emp table.
 
sol:
===

Delimiter //
create procedure ex1()
begin
 select * from emp;
end //

Delimiter;


to call procedure:
===================

call ex1();


to display all the procedure from database:
===========================================

show procedure status where db='database';

ex:
===
show procedure status where db='cts'

to drop procedure:
==================
drop procedure  databasename.procedure_name

or 

use database;

drop procedure procedure_name;


Ex2:
====

create a procedure named as ex2 and to store the query to display the emp records
where depnto 10,20 or 30 using in parameter

sol:
====

Delimiter //

create procedure ex2(in dno decimal)
begin
select * from emp where deptno=dno;
end //


to call procedure:
==================

call ex2(10) //

call ex2(20) //

call ex2(30) //


Ex3:
----
create a procedure named as ex3 to store max(sal) into out parameter from emp table.

sol:
====

Delimiter //

create procedure ex3(out ms decimal)
begin

select max(sal) into ms from emp;

end //


to call procedure with out parameter 
=====================================

call ex3(@s) //   /*when call the procedure it will return out parameter or variable value, 
                                         then we need to store that value into a variable).
select @s //


ex4:
====
create procedure named as ex4 to store max(sal) int to outparameter from emp
where deptno 10 or 20 or 30 using in,out paramter

sol:
----
delimiter //

create procedure ex4(in dno decimal,out ms decimal)
begin

select max(sal) into ms from emp where deptno=dno;

end //
delimiter ;


to call procedure:
==================
delimiter ;

call ex4(10,@tn);

select @tn;

call ex4(20,@tn);


select @tn;

call ex4(30,@tn);

select @tn;


Ex5:
----
create a procedure named as ex5 to store max(sal) from emp
where deptno 10 or 20 30 using INOUT parameter

sol:
----

Delimiter //

create procedure ex5(inout v_n decimal)
begin

select max(sal) into v_n from emp where deptno=v_n;

end //

delimiter ;   /*to restore delimiter from // to ;*/

to call the procedure:
======================

set @n=10;  /*it will act as input parameter */

call ex5(@n);       

select @n;     /*it will act as output parameter*/

--------------
set @n=20

call ex5(@n);

select @n;


Ex6:
----
Create a procedure to declare local variable 
initialize and display it.

sol:
---

delimiter //
create procedure ex6()
begin

declare a int;
declare b varchar(10);   /*declaration of variables */
declare c float;

set a=10;
set b='welcome';        /*initialization*/
set c=300;    

select a,b,c;           /*display*/

end //

delimiter ;

to call the procedure:
----------------------
call ex6();


conditional or control statement:
=================================
if:
---
if condition then
  statement-1;
end if;


if-else:
--------

syntax:
-------

if condition then
  statement-1;
else
  statement-2;

end if;


Ex:
---
create a procedure to compare two integer variables
display which is greater  using in parameter.

sol:
===

Delimiter //

create procedure ex7(in a int,in b int)

begin

declare msg varchar(30);

if a>b then
   set msg='a is greater than b';
else
   set msg='b is greater than a';

end if;

select msg;

end //

delimiter ;


to call procedure:
------------------
call ex7(10,5)  ;   

call ex7(1,5) ;


Ex:
---
if-else-if:
-----------

syntax:
-------

if condition then
  statement-1;
elseif condition then
  statement-2;
elseif condition then
  statement-3;
else 
  statement-4;

end if;

ex:
---
create a procedure to compare three integer variables
display which is greater  using in parameter and if-else-if.

sol:
---
Delimiter //

create procedure ex8(in a int,in b int,in c int)
begin

declare msg varchar(30);

if a>b and a>c then
   set msg='a is greater than b,c';

elseif b>c and b>a then
   set msg='b is greater than a,c';

else
   set msg='c is greater than a,b';

end if;

select msg;

end //

delimiter ;

to call procedure:
==================
call ex8(10,5,1);

call ex8(5,10,2);

cal ex8(5,1,7);


Exercises:
=========
1)create a procedure named as ex9 to perform sum of two number 
using in parameters.

sol:
----
delimiter //

create procedure ex_9(in n1 int,in n2 int)
begin

declare res int;

set res=n1+n2;

select res;

end //

delimiter ;

to call procedure:
------------------
call ex_9(10,10);


2)create a procedure named as ex10 to perform sum of two number 
using in parameters and out parameter

sol:
----
delimiter //

create procedure ex10(in n1 int,in n2 int,out res int)
begin

set res=n1+n2;

end //

delimiter ;


to call procedure:
==================
call ex10(10,30,@rs);

select @rs;



Function:
---------

In MySQL, a function is a stored program that you can pass parameters into and then return a value.

Just as you can create functions in other languages, you can create your own functions in MySQL.

Syntax
-------

The syntax to create a function in MySQL is:
--------------------------------------------
DELIMITER //  

CREATE FUNCTION function_name [ (parameter datatype [, parameter datatype]) ]
RETURNS return_datatype

DETERMINISTIC

BEGIN

   declaration_section

   executable_section
   return datatype;


END;

DELIMITER //  

function_name
--------------
The name to assign to this function in MySQL.

parameter
----------
One or more parameters passed into the function. When creating a function, 
all parameters are considered to be IN parameters (not OUT or INOUT parameters) 
where the parameters can be referenced by the function but can not be overwritten by the function.

return_datatype
----------------
The data type of the function's return value.

declaration_section
--------------------
The place in the function where you declare local variables.

executable_section
------------------
The place in the function where you enter the code for the function.

DETERMINISTIC:
--------------
it means the function will return the same values if the same arguments are supplied to it.


to call function:
==================

select function_name(if any parameters pass the value);


Ex:
---
create a function named as addition which takes three parameters
and perform sum of three numbers and return it

sol:
----

delimiter //
create function addition(a int,b int,c int)
returns int

DETERMINISTIC

begin

return (a+b+c);

end //

delimiter ;


to call the function:
----------------------

select addition(10,20,30);   //it will return 60;


to drop function:
-----------------
drop function function_name;

note:
-----
function name should be userdefined name.
(Don't use predefined function names like string functions,date functions,number functions etc).


Ex:
---
create a function which returns the max(sal) from emp table.

sol:
----

delimiter //

create function ms()
returns decimal

DETERMINISTIC

begin

declare v_m decimal;

select max(sal) into v_m from emp;

return v_m;

end //

delimiter ;

to call the function:
=====================
select ms() as maximumSal;


Ex:
---
create a function to display welcome 'ename' from emp table
when pass a ename column t should print welcome smith...etc

sol:
====
delimiter //

create function concat_en(n varchar(10))
returns varchar(20)

DETERMINISTIC

begin

declare en varchar(20);
  
set en=concat('welcome',n);

return en;

end //

delimiter ;


to call the function:
=====================

select concat_en(ename) from emp;

select concat_en(' Rajukumar');



TRIGGERS:
=========

A Trigger in MySQL is a special kind of stored operation that gets invoked automatically when an event has 
occurred in the database.

It is a database object which is related to a table in the database and becomes active when a defined MySQL 
statement is initiated on the table. 

These DML (Data Manipulation Language) execution operations can be INSERT, DELETE, UPDATE and triggers 
can be called before or after these events.

A trigger is a set of actions that are run automatically when a specified change operation 
(SQL INSERT, UPDATE, or DELETE statement) is performed on a specified table. 
Triggers are useful for tasks such as enforcing business rules, validating input data, and keeping an audit trail.


For example when a row is inserted to a table or when any columns are modified, a trigger can be fired. 
Mostly, triggers can are made to run whenever any alterations are done to the data of a table. 

Triggers are simply a SQL code to run before or just after any DML action events on a particular table in a database.


Syntax
-------

CREATE
[DEFINER = user] TRIGGER trigger_name
trigger_time trigger_event
ON tbl_name 
FOR EACH ROW
trigger_body

trigger_time: { BEFORE | AFTER }
trigger_event: { INSERT | UPDATE | DELETE }


Parameters
------------
DEFINER clause:
---------------
 Identifies the MySQL account that is used for access at trigger initiation time.

trigger_name:
-------------
The name of all triggers should be unique inside a schema.

trigger_time: 
-------------
Defines the trigger action time which can be either before or after any row affected.

trigger_event: 
--------------
Specifies the type of operation to activate the trigger.

tbl_name: 
---------
The table name should be of a permanent table not a temporary or a view table to associate a trigger.

trigger_body: 
-------------
It is used to display a statement when the trigger is fired. 
The compound statement construct BEGIN … END can be used to complete many statements.


Types of Trigger in MYSQL
=========================
Two types of triggers are defined by the SQL standard:

Row-Level Trigger: 
=================
It is executed when each row is affected by insertion, updation and deletion actions on a table. 
Like if you have a table and 50 rows are inserted, updated or deleted, then automatically the trigger
is also invoked for 50 times.

Statement-Level Trigger: 
======================
This trigger is invoked only once for a transaction regardless of the number of rows inserted, updated, or deleted.

note:
=====
Row-Level Trigger is supported in MySQL but not Statement-Level Trigger.


PSEUDO COLUMNS:
===============

NEW:- IT REPRESENT NEW VALUES FOR A COLUMNS OF A TABLE 

OLD :- IT REPRESNT OLD VALUES FOR A COLUMNS OF A TABLE.


full syntax:
============
delimiter //

create trigger trigger_name

{before/after} 

[insert or update or delete] on table_name

for each row

begin 

statment; or logic;

end //

delimiter //


Example:
========
1) create a table named as emp13(empno,ename,sal)
2) create a trigger  before insert into emp13 covert the ename into capital letter.
3) perform multiple insert to check trigger is fired or not?

sol:
----

1)create table emp13(empno int(4),ename varchar(10),sal decimal(7));

2)

delimiter //

create trigger trg_emp_13
before insert on emp13
for each row
begin

set New.ename=upper(New.ename);

end //

delimiter ;


Exercise:
=========
1)create table studentdetails(sid int(4),sname varchar(10),m1 int(3),m2 int(3),m3 int(3),total int(5));

2)create trigger on studentdetails before insert to table it should calculate sum of m1+m2+m3 and store in total column

sol:
----

delimiter //

create trigger trg_st_1
before insert on studentdetails
for each row
begin

set new.total=new.m1+new.m2+new.m3;

end //

delimiter ;


execute insert
==============
mysql> insert into studentdetails (sid,sname,m1,m2,m3) values
    -> (101,'rahul',60,70,80);
Query OK, 1 row affected (0.01 sec)

mysql> select * from studentdetails;
+------+-------+------+------+------+-------+
| sid  | sname | m1   | m2   | m3   | total |
+------+-------+------+------+------+-------+
|  101 | rahul |   60 |   70 |   80 |   210 |
+------+-------+------+------+------+-------+
1 row in set (0.00 sec)



Example:
--------
bank audting

1)create a table emp_base(empno,ename,sal)
  
  create table emp_base(empno int(4),ename varchar(10),sal int(8));

  insert into emp_base(1001,'smith',3000);


2)create a backup table named as emp_base_update(empno,n_ename,o_ename,n_sal,o_sal,operat,ondate)

  create table emp_base_update(empno int(4),n_ename varchar(10),
             o_ename varchar(10),n_sal int(8),o_sal int(8),opera varchar(10),ef_ondate date);



3)create a trigger before update an record in emp_base table insert that into emp_base_update(history,new value).

sol:
----

delimiter //

create trigger trg_adut_emp_base
before update on emp_base
for each row
begin

insert into emp_base_update (empno,n_ename,o_ename,n_sal,o_sal,opera,ef_ondate) values
                  (old.empno,new.ename,old.ename,new.sal,old.sal,'update',current_date());

end //

delimiter ;

Execute:
--------
mysql> update emp_base set ename='martin',sal=5000 where empno=1001;

mysql> select * from emp_base;
+-------+--------+------+
| empno | ename  | sal  |
+-------+--------+------+
|  1001 | martin | 5000 |
+-------+--------+------+
1 row in set (0.00 sec)


mysql> select * from emp_base_update;
+-------+---------+---------+-------+-------+--------+------------+
| empno | n_ename | o_ename | n_sal | o_sal | opera  | ef_ondate  |
+-------+---------+---------+-------+-------+--------+------------+
|  1001 | martin  | smith   |  5000 |  3000 | update | 2021-03-05 |
+-------+---------+---------+-------+-------+--------+------------+
1 row in set (0.00 sec)



Exercise:
--=======
1)create a table emp_base(empno,ename,sal)
  
  create table emp_base(empno int(4),ename varchar(10),sal int(8));

  insert five records.


2)create a backup table named as emp_base_delete(empno,ename,opera,ondate);

create table emp_base_delete( empno int(4),ename varchar(10),sal int(8),opera varchar(10),ef_ondate data);


3) create a trigger before delete a record from emp_base,the deleted record should backup into emp_base_delete table.

sol:
----


delimiter //

create trigger trg_adut_emp_del
before delete on emp_base
for each row
begin

insert into emp_base_delete(empno,ename,sal,opera,ef_ondate) values
     (old.empno,old.ename,old.sal,'delete',current_date());
                
end //

delimiter ;


Execute:
========
mysql> delete from emp_base where empno=1005;
Query OK, 1 row affected (0.01 sec)

mysql> select * from emp_base;
+-------+--------+------+
| empno | ename  | sal  |
+-------+--------+------+
|  1001 | john   | 6000 |
|  1002 | laxmi  | 5000 |
|  1003 | ramesh | 2000 |
|  1004 | raj    | 1000 |
+-------+--------+------+
4 rows in set (0.00 sec)

mysql> select * from emp_base_delete;
+-------+-------+------+--------+------------+
| empno | ename | sal  | opera  | ef_ondate  |
+-------+-------+------+--------+------------+
|  1005 | sumit | 4000 | delete | 2021-03-05 |
+-------+-------+------+--------+------------+
1 row in set (0.00 sec)

mysql>



to drop a trigger:
==================
drop trigger trigger_name;



to list all trigger on table:
=============================

show triggers from database_name where table='tablename'

ex:
---
show triggers from cts where table='emp_base';



SET OPERATORS:
==============
UNION
UNIONALL
INTERSECT
MINUS

UNION:
======
THIS OPERATEOR UNION RETRIVES THE OUTPUT OF TWO QUERIES 
AND IT REMOVES DUPLICATE RECORDS.

CREATE TABLE DEPT_U1 AS SELECT * FROM DEPT;
CREATE TABLE DEPT_U2 AS SELECT * FROM DEPT;

INSERT SOME RECORDS INTO ABOVE TWO TABLES.

EX:
====

SELECT * FROM DEPT_U1
UNION
SELECT * FROM DEPT_U2;

---IT WILL REMOVE DUPLICATES RECORDS.

UNION ALL:
==========

SELECT * FROM DEPT_U1
UNION ALL
SELECT * FROM DEPT_U2;

NOTE:
=====
IT WILL DISPLAY ALL THE DUPLICATE RECORDS FROM TWO TABLES

INTESECT:
==========
SELECT * FROM DEPT_U1
INTERSECT
SELECT * FROM DEPT_U2;

NOTE:
====

IT WILL DISPLAY MATCHED RECORDS FROM TWO TABLES.


MINUS:
=====
SELECT * FROM DEPT_U1
MINUS
SELECT * FROM DEPT_U2;

NOTE:
=====
IT WILL DISPLAY NON-MATCHED RECORDS FROM FIRST TABLE(DEPT_U1).



  SUBQUERIES:
  ===========

  A SUBQUERY IS A SELECT STATEMENT WHICH EMBEDDED IN ANOTHER
  SELECT STATEMENT.
            

  THERE ARE DIFFERENT TYPES OF SUB-QUERIES.

  1)SINGLE ROW SUB-QUERY
  2)MULTIPLE ROW SUB-QUERY
       

 1)SINGLE ROW SUBQUERY:
 ======================

 A SINGLE ROW SUBQUERY IS A SUBQUERY WHICH RETURN ONE VALUE.

 EX:
 ===

 SELECT * FROM EMP WHERE SAL >
 (SELECT SAL FROM EMP WHERE EMPO=7566);

internally subquery(inner query) executes first followed by outer query.

 select * from emp where sal > 2975;



 2)MULTIPLE ROW SUB QUERY:
 =========================

 A SUBQUERY WHICH RETURNS MORE THAN ONE VALUE,IN SUCH CASE
 WE SHOULD USE THE OPERATORS LIKE
 ALL,ANY,IN OR NOT IN,Exists,..ETC

 EX:
 ====

 SELECT * FROM EMP WHERE SAL > 
             ANY(SELECT SAL FROM EMP WHERE DEPTNO=20);


 INTERNALLY SUBSQUERY CONVERTED INTO

 SELECT * FROM EMP WHERE SAL > ANY(800,2975,3000,1100,3000);



 EX:
 ===

 SELECT * FROM EMP WHERE SAL > 
             ALL(SELECT SAL FROM EMP WHERE DEPTNO=20);

INTERNALLY SUBQUERY CONVERTED INTO

SELECT * FROM EMP WHERE SAL> ALL(800,2975,3000,1100,3000);



SELECT CLAUSE:
==============

IN SELECT CLAUSE WE NEED TO SPECIFY THE SUBQUERY WHICH RETURN
ONE VALUE.


EX:
===

SELECT EMPNO,ENAME,(SELECT MAX(SAL) FROM EMP) as maxsal FROM EMP;


Exercise:
=========
write an sql query to display second highest salary from emp table  using sub-query?

sol:
---
select max(sal) from emp where sal < (select max(sal) from emp )


